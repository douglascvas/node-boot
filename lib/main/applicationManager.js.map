{"version":3,"sources":["../src/main/applicationManager.ts"],"names":[],"mappings":"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","file":"applicationManager.js","sourcesContent":["import \"reflect-metadata\";\nimport {DI, ServiceInfo, FactoryInfo, AutoScanInfo} from \"./decorator/di\";\nimport {DefaultDependencyInjector} from \"./dependencyInjector/defaultDependencyInjector\";\nimport {MVC, EndpointInfo} from \"./decorator/mvc\";\nimport {ModuleScannerService, ClassInfo} from \"./moduleScanner/moduleScannerService\";\nimport {DefaultModuleScannerService} from \"./moduleScanner/defaultModuleScannerService\";\nimport {DependencyInjector} from \"./dependencyInjector/dependencyInjector\";\nimport {Logger, LoggerFactory} from \"./loggerFactory\";\nimport {ObjectUtils} from \"./objectUtils\";\nimport {WebManager} from \"./webManager/webManager\";\nimport * as sourceMapSupport from \"source-map-support\";\n\nsourceMapSupport.install();\n\nexport class ApplicationManager {\n  private logger: Logger;\n\n  constructor(private mainApplicationClass: any,\n              private webManager?: WebManager,\n              private loggerFactory?: LoggerFactory,\n              private dependencyInjector?: DependencyInjector,\n              private moduleScannerService?: ModuleScannerService) {\n    this.loggerFactory = loggerFactory || new LoggerFactory();\n    this.logger = loggerFactory.getLogger('dependencyInjector');\n    this.dependencyInjector = dependencyInjector || new DefaultDependencyInjector(loggerFactory);\n    this.moduleScannerService = moduleScannerService || new DefaultModuleScannerService();\n    this.dependencyInjector.value('applicationManager', this);\n  }\n\n  public registerValue(name: string, value: any): Promise<void> {\n    return this.dependencyInjector.value(name, value);\n  }\n\n  public registerService(service: Function, name?: string): Promise<boolean> {\n    return this.dependencyInjector.service(service, name);\n  }\n\n  public registerFactory(name: string|Function, factoryFn: Function, holder?: any): Promise<boolean> {\n    return this.dependencyInjector.factory(name, factoryFn, holder);\n  }\n\n  public async bootstrap(): Promise<any> {\n    this.dependencyInjector.service(this.mainApplicationClass);\n    let autoScanInfo: AutoScanInfo = DI.getAutoScanConfig(this.mainApplicationClass);\n    if (autoScanInfo) {\n      await this.scanAndRegisterModules(autoScanInfo.includePaths, autoScanInfo.excludePaths);\n    }\n    this.dependencyInjector.assertAllResolved();\n    await this.registerEndpoints();\n    return this.dependencyInjector.findOne(this.mainApplicationClass).get();\n  }\n\n  private async scanAndRegisterModules(includePaths?: string[], excludePaths?: string[]): Promise<void> {\n    let classesInfo: ClassInfo[] = await this.moduleScannerService.scan(includePaths, excludePaths);\n    let registeredClasses: Promise<void>[] = classesInfo.map(classInfo => this.registerClass(classInfo));\n    await Promise.all(registeredClasses);\n  }\n\n  private async registerClass(classInfo: ClassInfo): Promise<void> {\n    this.logger.debug(`Loading class ${classInfo.name}`);\n\n    let declaredServices: Promise<boolean>[] = DI.getDeclaredServices(classInfo.classz)\n      .map((serviceInfo: ServiceInfo) => {\n        this.logger.debug(`Registering scanned service for ${classInfo.name}: ${serviceInfo.name || ObjectUtils.extractClassName(serviceInfo.classz)}`);\n        return this.registerService(serviceInfo.classz, serviceInfo.name)\n      });\n    await Promise.all(declaredServices);\n\n    let declaredFactories: Promise<boolean>[] = DI.getDeclaredFactories(classInfo.classz)\n      .map((factoryInfo: FactoryInfo) => {\n        this.logger.debug(`Registering scanned factory for ${classInfo.name}: ${factoryInfo.name}`);\n        return this.registerFactory(factoryInfo.name, factoryInfo.factory);\n      });\n    await Promise.all(declaredFactories);\n  }\n\n  private registerEndpoints() {\n    let self = this;\n    if (!this.webManager) {\n      throw new Error('No webmanager configured. Make sure you have given a webManager instance to the applicationManager constructor.');\n    }\n    this.dependencyInjector.findAll()\n      .filter(unit => unit.classz)\n      .forEach(unit => {\n        let endpointsInfo: EndpointInfo[] = MVC.getEndpoints(unit.classz);\n        endpointsInfo.forEach(endpointInfo => self.webManager.registerApi(endpointInfo, unit.value));\n      });\n  }\n\n}"]}