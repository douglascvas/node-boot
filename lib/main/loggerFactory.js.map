{"version":3,"sources":["../src/main/loggerFactory.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,8BAA0B,eAAe,CAAC,CAAA;AAE1C,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEjC;IACE,YAAoB,YAAY,GAAQ,EAAE;QAAtB,iBAAY,GAAZ,YAAY,CAAU;QAClC,MAAO,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IACxC,CAAC;IAEM,SAAS,CAAC,SAA0B;QACzC,EAAE,CAAC,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;YAClC,SAAS,GAAG,yBAAW,CAAC,gBAAgB,CAAW,SAAS,CAAC,CAAC;QAChE,CAAC;QACD,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IACjD,CAAC;;AACH,CAAC;AAXY,qBAAa,gBAWzB,CAAA;AAED;IACE,YAAoB,OAAO;QAAP,YAAO,GAAP,OAAO,CAAA;IAC3B,CAAC;IAEM,GAAG,CAAC,GAAG,IAAc;QAC1B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;IACtE,CAAC;IAEM,IAAI,CAAC,GAAG,IAAc;QAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;IAClE,CAAC;IAEM,KAAK,CAAC,GAAG,IAAc;QAC5B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;IACnE,CAAC;IAEM,IAAI,CAAC,GAAG,IAAc;QAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;IAClE,CAAC;IAEM,KAAK,CAAC,GAAG,IAAW;QACzB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;IACnE,CAAC;IAEO,QAAQ,CAAC,IAAgB;QAC/B,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;AAEH,CAAC;AA5BY,cAAM,SA4BlB,CAAA","file":"loggerFactory.js","sourcesContent":["'use strict';\n\nimport {ObjectUtils} from \"./objectUtils\";\n\nconst log4js = require(\"log4js\");\n\nexport class LoggerFactory {\n  constructor(private loggerConfig: any = {}) {\n    (<any>log4js).configure(loggerConfig);\n  }\n\n  public getLogger(reference: string|Function): Logger {\n    if (typeof reference !== 'string') {\n      reference = ObjectUtils.extractClassName(<Function>reference);\n    }\n    return new Logger(log4js.getLogger(reference));\n  };\n}\n\nexport class Logger {\n  constructor(private _logger) {\n  }\n\n  public log(...args: String[]) {\n    this._logger.debugLog.apply(this._logger, this._toArray(arguments));\n  }\n\n  public info(...args: String[]) {\n    this._logger.info.apply(this._logger, this._toArray(arguments));\n  }\n\n  public error(...args: String[]) {\n    this._logger.error.apply(this._logger, this._toArray(arguments));\n  }\n\n  public warn(...args: String[]) {\n    this._logger.warn.apply(this._logger, this._toArray(arguments));\n  }\n\n  public debug(...args: any[]) {\n    this._logger.debug.apply(this._logger, this._toArray(arguments));\n  }\n\n  private _toArray(args: IArguments): any[] {\n    return Array.prototype.slice.apply(args);\n  }\n\n}"]}