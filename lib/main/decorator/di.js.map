{"version":3,"sources":["../src/main/decorator/di.ts"],"names":[],"mappings":";AAAA,QAAO,kBAAkB,CAAC,CAAA;AAE1B,MAAM,kBAAkB,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AAC/C,MAAM,mBAAmB,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;AACjD,MAAM,mBAAmB,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;AAiBjD,iBAAwB,IAAS;IAC/B,MAAM,CAAC,UAAU,MAAW,EAAE,WAAmB,EAAE,UAA8B;QAC/E,IAAI,SAAS,GAAkB,OAAO,CAAC,WAAW,CAAC,kBAAkB,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC;QACrF,SAAS,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,CAAC,KAAK,EAAC,CAAC,CAAC;QACxD,OAAO,CAAC,cAAc,CAAC,kBAAkB,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IAChE,CAAC,CAAA;AACH,CAAC;AANe,eAAO,UAMtB,CAAA;AAID,iBAAwB,IAAU;IAChC,uBAAuB,MAAW;QAChC,IAAI,QAAQ,GAAkB,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC;QACrF,QAAQ,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC,CAAC;QAC5C,OAAO,CAAC,cAAc,CAAC,mBAAmB,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAA;IAC/D,CAAC;IAED,EAAE,CAAC,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;IAGD,IAAI,MAAM,GAAG,IAAI,CAAC;IAClB,IAAI,GAAG,IAAI,CAAC;IACZ,aAAa,CAAC,MAAM,CAAC,CAAC;IACtB,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAhBe,eAAO,UAgBtB,CAAA;AAED,kBAAyB,YAA6B,EAAE,YAA8B;IACpF,EAAE,CAAC,CAAC,OAAO,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC;QACrC,YAAY,GAAG,CAAS,YAAY,CAAC,CAAC;IACxC,CAAC;IACD,EAAE,CAAC,CAAC,OAAO,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC;QACrC,YAAY,GAAG,CAAS,YAAY,CAAC,CAAC;IACxC,CAAC;IACD,MAAM,CAAC,UAAU,MAAW;QAC1B,OAAO,CAAC,cAAc,CAAC,mBAAmB,EAAgB;YACxD,YAAY,EAAE,YAAY,IAAI,EAAE;YAChC,YAAY,EAAE,YAAY,IAAI,EAAE;SACjC,EAAE,MAAM,CAAC,CAAC;IACb,CAAC,CAAA;AACH,CAAC;AAbe,gBAAQ,WAavB,CAAA;AAED,qBAAqB,GAAG,EAAE,MAAM,EAAE,YAAY;IAC5C,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC;QACrC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,YAAY,CAAC;AAC/D,CAAC;AAED;IACE,OAAc,iBAAiB,CAAC,MAAW;QACzC,MAAM,CAAC,WAAW,CAAC,mBAAmB,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC;IAED,OAAc,mBAAmB,CAAC,MAAW;QAC3C,MAAM,CAAC,WAAW,CAAC,mBAAmB,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,OAAc,oBAAoB,CAAC,MAAW;QAC5C,MAAM,CAAC,WAAW,CAAC,kBAAkB,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IACrD,CAAC;AAEH,CAAC;AAbY,UAAE,KAad,CAAA","file":"di.js","sourcesContent":["import \"reflect-metadata\";\n\nconst factoryMetadataKey = Symbol(\"factoryMD\");\nconst servicesMetadataKey = Symbol(\"servicesMD\");\nconst autoscanMetadataKey = Symbol(\"autoScanMD\");\n\nexport interface FactoryInfo {\n  name: string,\n  factory: Function\n}\n\nexport interface ServiceInfo {\n  name: string,\n  classz: Function\n}\n\nexport interface AutoScanInfo {\n  includePaths: string[],\n  excludePaths: string[]\n}\n\nexport function Factory(name: any) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    let producers: FactoryInfo[] = Reflect.getMetadata(factoryMetadataKey, target) || [];\n    producers.push({name: name, factory: descriptor.value});\n    Reflect.defineMetadata(factoryMetadataKey, producers, target);\n  }\n}\n\n/**\n */\nexport function Service(name?: any): any {\n  function defineService(target: any) {\n    let services: ServiceInfo[] = Reflect.getMetadata(servicesMetadataKey, target) || [];\n    services.push({name: name, classz: target});\n    Reflect.defineMetadata(servicesMetadataKey, services, target)\n  }\n\n  if (name && typeof name === 'string') {\n    return defineService;\n  }\n\n  // No parameter\n  let target = name;\n  name = null;\n  defineService(target);\n  return target;\n}\n\nexport function AutoScan(includePaths: string|string[], excludePaths?: string|string[]) {\n  if (typeof includePaths === 'string') {\n    includePaths = [<string>includePaths];\n  }\n  if (typeof excludePaths === 'string') {\n    excludePaths = [<string>excludePaths];\n  }\n  return function (target: any) {\n    Reflect.defineMetadata(autoscanMetadataKey, <AutoScanInfo>{\n      includePaths: includePaths || [],\n      excludePaths: excludePaths || []\n    }, target);\n  }\n}\n\nfunction getMetadata(key, target, defaultValue) {\n  return Reflect.getMetadata(key, target) ||\n    Reflect.getMetadata(key, target.prototype) || defaultValue;\n}\n\nexport class DI {\n  public static getAutoScanConfig(target: any): AutoScanInfo {\n    return getMetadata(autoscanMetadataKey, target, null);\n  }\n\n  public static getDeclaredServices(target: any): ServiceInfo[] {\n    return getMetadata(servicesMetadataKey, target, []);\n  }\n\n  public static getDeclaredFactories(target: any): FactoryInfo[] {\n    return getMetadata(factoryMetadataKey, target, []);\n  }\n\n}"]}