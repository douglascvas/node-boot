{"version":3,"sources":["../src/main/moduleScanner/defaultModuleScannerService.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;AAEb,MAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,MAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,8BAA0B,gBAAgB,CAAC,CAAA;AAE3C;IAEe,IAAI,CAAC,YAAuB,EAAE,YAAuB;;YAChE,IAAI,MAAM,GAAgB,EAAE,CAAC;YAC7B,IAAI,QAAQ,GAA0B,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YACzF,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBACrC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC;gBACzB,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC;oBAChC,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;gBAC1C,CAAC;YACH,CAAC;YACD,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;KAAA;IAEa,WAAW,CAAC,YAAuB,EAAE,YAAuB;;YACxE,MAAM,MAAM,GAAqB,IAAI,GAAG,EAAE,CAAC;YAE3C,MAAM,WAAW,GAAW,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnD,MAAM,OAAO,GAAQ,EAAE,CAAC;YACxB,EAAE,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxC,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1C,CAAC;YAED,IAAI,KAAK,GAAU,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAChE,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;KAAA;IAEO,WAAW,CAAC,WAAmB,EAAE,OAAY;QACnD,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,UAAU,GAAG,EAAE,KAAK;gBAC7C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACrB,CAAC;gBACD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,iBAAiB,CAAC,IAAI,EAAE,MAAwB;QACtD,MAAM,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QACxC,MAAM,OAAO,GAAG,yBAAW,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC5C,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,OAAO,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;AAEH,CAAC;AA/CY,mCAA2B,8BA+CvC,CAAA","file":"defaultModuleScannerService.js","sourcesContent":["'use strict';\n\nimport * as glob from \"glob\";\nimport * as path from \"path\";\nimport {ModuleScannerService, ClassInfo} from \"./moduleScannerService\";\nimport {ObjectUtils} from \"../objectUtils\";\n\nexport class DefaultModuleScannerService implements ModuleScannerService {\n\n  public async scan(includePaths?: string[], excludePaths?: string[]): Promise<ClassInfo[]> {\n    let result: ClassInfo[] = [];\n    let classMap: Map<string, Function> = await this.findClasses(includePaths, excludePaths);\n    for (let entry of classMap.entries()) {\n      let [key, value] = entry;\n      if (typeof value === 'function') {\n        result.push({name: key, classz: value});\n      }\n    }\n    return result;\n  }\n\n  private async findClasses(includePaths?: string[], excludePaths?: string[]): Promise<Map<string, any>> {\n    const result: Map<string, any> = new Map();\n\n    const mainPattern: string = includePaths.join('|');\n    const options: any = {};\n    if (excludePaths && excludePaths.length) {\n      options.ignore = excludePaths.join('|');\n    }\n\n    let files: any[] = await this.searchFiles(mainPattern, options);\n    files.forEach(file => this.extractModuleInfo(file, result));\n    return result;\n  }\n\n  private searchFiles(mainPattern: string, options: any): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      glob(mainPattern, options, function (err, files) {\n        if (err) {\n          return reject(err);\n        }\n        return resolve(files);\n      });\n    });\n  }\n\n  private extractModuleInfo(file, result: Map<string, any>) {\n    const mod = require(path.resolve(file));\n    const entries = ObjectUtils.toIterable(mod);\n    for (let entry of entries) {\n      result.set(entry.key, entry.value);\n    }\n  }\n\n}"]}