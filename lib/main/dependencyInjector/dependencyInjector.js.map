{"version":3,"sources":["../src/main/dependencyInjector/dependencyInjector.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAIb;IAKE,YAAmB,IAAY,EACZ,MAAgB,EAChB,SAAmB,EACnB,OAAkB,EAClB,cAAoB;QAJpB,SAAI,GAAJ,IAAI,CAAQ;QACZ,WAAM,GAAN,MAAM,CAAU;QAChB,cAAS,GAAT,SAAS,CAAU;QACnB,YAAO,GAAP,OAAO,CAAW;QAClB,mBAAc,GAAd,cAAc,CAAM;QACrC,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,EAAE,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC;IACjC,CAAC;AACH,CAAC;AAfY,YAAI,OAehB,CAAA","file":"dependencyInjector.js","sourcesContent":["'use strict';\n\nimport {Optional} from \"../optional\";\n\nexport class Unit {\n  public resolved: boolean;\n  public instanceValue: any;\n  public referencedBy: Map<string, Unit>;\n\n  constructor(public name: string,\n              public classz: Function,\n              public classArgs: string[],\n              public factory?: Function,\n              public factoryContext?: any) {\n    this.classArgs = classArgs || [];\n    this.referencedBy = new Map();\n    this.resolved = false;\n    this.factory = factory || null;\n  }\n}\n\nexport interface UnitInfo {\n  name: string;\n  value: any;\n  classz: Function;\n}\n\nexport interface DependencyInjector {\n  assertAllResolved(): void;\n  value(name: string, value: any): Promise<void>;\n  service(classz: any, name?: string): Promise<boolean>;\n  factory(name: string|Function, factoryFn?: Function, factoryContext?: any): Promise<boolean>;\n  findOne(name: any): Optional<any>;\n  findAll(): UnitInfo[];\n  assertAllResolved(): void;\n}"]}