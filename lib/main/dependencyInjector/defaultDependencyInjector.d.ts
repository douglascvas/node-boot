import { DependencyInjector, UnitInfo } from "./dependencyInjector";
import { LoggerFactory } from "../loggerFactory";
import { Optional } from "../optional";
export declare class DefaultDependencyInjector implements DependencyInjector {
    private loggerFactory;
    private translationMap;
    private logger;
    private units;
    constructor(loggerFactory?: LoggerFactory);
    value(name: string, value: any): Promise<void>;
    service(classz: any, name?: string): Promise<boolean>;
    factory(factoryName: string | Function, factoryFn: Function, factoryContext?: any): Promise<boolean>;
    findOne(name: any): Optional<any>;
    findAll(): UnitInfo[];
    assertAllResolved(): void;
    private add(unit);
    private setReference(dependencyName, unit);
    private resolve(unit, resolveQueue?);
    private resolveReferences(unit, resolveQueue?);
    private getOrCreateUnit(name, classz?, factory?, factoryContext?);
    private updateUnitData(unit, factory, factoryContext, classz, classArgs);
    private getInstanceName(classz, name?);
    private getUnitsWithResolvedStatusAs(status);
    private translateName(name);
    private defaultFactory(classz, dependencies);
    private isUnregisteredUnit(unit);
    private instantiate(unit, dependencies);
    private assertIsFunction(value, errorMessage);
    private getFunctionName(classz);
}
