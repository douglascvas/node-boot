{"version":3,"sources":["../src/main/objectUtils.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,QAAO,kBAAkB,CAAC,CAAA;AAE1B;IACE,QAAe,UAAU,CAAC,KAAK;QAC7B,EAAE,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACtC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,CAAC;YACD,MAAM,CAAC;QACT,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC9B,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9B,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvC,MAAM,EAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,EAAC,CAAC;YACtC,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAc,gBAAgB,CAAC,MAAgB;QAC7C,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QACjC,EAAE,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC;YAC5B,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QAC3C,CAAC;QACD,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,OAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,MAAM,CAAC,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IAED,OAAc,OAAO,CAAC,MAAgB;QACpC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAED,OAAc,WAAW,CAAC,MAAgB;QACxC,IAAI,QAAQ,GAAG,eAAe,CAAC;QAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACzB,QAAQ,GAAG,iBAAiB,GAAG,QAAQ,CAAC;QAC1C,CAAC;QACD,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;aACZ,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,KAAa,EAAE,KAAa,EAAE,KAAe,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;IACjG,CAAC;IAKD,OAAc,cAAc,CAAC,IAAI;QAC/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;IACnD,CAAC;AACH,CAAC;AArDY,mBAAW,cAqDvB,CAAA","file":"objectUtils.js","sourcesContent":["'use strict';\n\nimport \"reflect-metadata\";\n\nexport class ObjectUtils {\n  public static *toIterable(value) {\n    if (value instanceof Array) {\n      for (let i = 0; i < value.length; i++) {\n        yield value[i];\n      }\n      return;\n    }\n    if (typeof value === 'object') {\n      let keys = Object.keys[value];\n      for (let key of Reflect.ownKeys(value)) {\n        yield {key: key, value: value[key]};\n      }\n    }\n  }\n\n  public static extractClassName(classz: Function): string {\n    let asString = classz.toString();\n    if (asString === '[object]') {\n      asString = classz.constructor.toString();\n    }\n    let match = asString.match(/(?:function|class)[\\s]*(\\w+).*(\\(|\\{)/);\n    if (!match) {\n      console.log('The class must specify a name.', classz);\n      return null;\n    }\n    return match[1];\n  }\n\n  public static isClass(classz: Function): boolean {\n    return classz.toString().indexOf('class') === 0;\n  }\n\n  public static extractArgs(classz: Function): string[] {\n    let regexStr = '\\\\(([^)]*)\\\\)';\n    if (this.isClass(classz)) {\n      regexStr = 'constructor[ ]*' + regexStr;\n    }\n    let match = classz.toString().match(new RegExp(regexStr));\n    if (!match) {\n      return [];\n    }\n    return match[1]\n      .split(',')\n      .map(name => name.trim()).filter((value: string, index: number, array: string[]) => !!value);\n  }\n\n  /**\n   * Make sure the first char is lower case.\n   */\n  public static toInstanceName(name) {\n    return name.replace(/^./, name[0].toLowerCase());\n  }\n}"]}