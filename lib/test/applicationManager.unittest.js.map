{"version":3,"sources":["../src/test/applicationManager.unittest.ts"],"names":[],"mappings":"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","file":"applicationManager.unittest.js","sourcesContent":["'use strict';\n\nimport * as sinon from \"sinon\";\nimport * as chai from \"chai\";\nimport {ApplicationManager} from \"../main/applicationManager\";\nimport {ModuleScannerService, ClassInfo} from \"../main/moduleScanner/moduleScannerService\";\nimport {LoggerFactory, Logger} from \"../main/loggerFactory\";\nimport {DependencyInjector} from \"../main/dependencyInjector/dependencyInjector\";\nimport {DefaultModuleScannerService} from \"../main/moduleScanner/defaultModuleScannerService\";\nimport {DefaultDependencyInjector} from \"../main/dependencyInjector/defaultDependencyInjector\";\nimport {RequestType, EndpointInfo, ResponseBody, RequestMapping} from \"../main/decorator/mvc\";\nimport {Optional} from \"../main/optional\";\nimport {AutoScan, Factory, Service} from \"../main/decorator/di\";\nimport {WebManager} from \"../main/webManager/webManager\";\nimport {ExpressWebManager} from \"../main/webManager/expressWebManager\";\nimport SinonSpy = Sinon.SinonSpy;\nimport SinonStub = Sinon.SinonStub;\n\nconst assert = chai.assert;\n\ndescribe('ApplicationManager', function () {\n\n  let appManager: ApplicationManager;\n  let webManager: WebManager;\n  let moduleScannerService: ModuleScannerService;\n  let loggerFactory: LoggerFactory;\n  let dependencyInjector: DependencyInjector;\n  let byClassInstance: ByClass;\n  const UNIT_NAME = \"test1\";\n\n\n  function spy() {\n    return sinon.spy();\n  }\n\n  function stub() {\n    return sinon.stub();\n  }\n\n  beforeEach(() => {\n    webManager = <any>sinon.createStubInstance(ExpressWebManager);\n    moduleScannerService = <any>sinon.createStubInstance(DefaultModuleScannerService);\n    dependencyInjector = <any>sinon.createStubInstance(DefaultDependencyInjector);\n    loggerFactory = <any>sinon.createStubInstance(LoggerFactory);\n    (<SinonStub>loggerFactory.getLogger).returns(sinon.createStubInstance(Logger));\n    byClassInstance = new ByClass();\n    appManager = new ApplicationManager(TestClassMain, webManager, loggerFactory, dependencyInjector, moduleScannerService);\n  });\n\n  describe('#bootstrap()', function () {\n    it('should register classes annotated with @Service', async function () {\n      // given\n      dependencyInjectorIsEmpty();\n      dependencyInjectorHasMainClassAsService();\n      scannerReturnsTestClasses();\n\n      // when\n      await appManager.bootstrap();\n\n      // then\n      assertServiceIsRegistered(ByClass, null);\n      assertServiceIsRegistered(DependencyWithNameFromString, 'byString');\n    });\n\n    it('should not register classes that are not annotated with @Service', async function () {\n      // given\n      dependencyInjectorIsEmpty();\n      dependencyInjectorHasMainClassAsService();\n      scannerReturnsTestClasses();\n\n      // when\n      await appManager.bootstrap();\n\n      // then\n      assertServiceIsNotRegistered(DependencyClassNotService);\n    });\n\n    it('should register functions annotated with @Producer as factories', async function () {\n      // given\n      dependencyInjectorIsEmpty();\n      dependencyInjectorHasMainClassAsService();\n      scannerReturnsTestClasses();\n\n      // when\n      await appManager.bootstrap();\n\n      // then\n      assertFactoryIsRegistered('byFactory', TestClassMain.prototype.create);\n    });\n\n    it('should certify that all dependencies were found', async function () {\n      // given\n      dependencyInjectorIsEmpty();\n      dependencyInjectorHasMainClassAsService();\n      scannerReturnsTestClasses();\n\n      // when\n      await appManager.bootstrap();\n\n      // then\n      assertAllDependenciesWhereChecked();\n    });\n\n    it('should register apis annotated with @RequestMapping', async function () {\n      // given\n      dependencyInjectorHasMainClassAsService();\n      dependencyInjectorFindsController();\n      scannerReturnsTestClasses();\n\n      // when\n      await appManager.bootstrap();\n\n      // then\n      assertApiIsRegistered({\n        path: '/testApi-1',\n        type: RequestType.GET,\n        callback: <any>sinon.match.any\n      }, byClassInstance);\n\n      assertApiIsRegistered({\n        path: '/testApi-2',\n        type: RequestType.POST,\n        callback: ByClass.prototype.testApiMethodWithoutResponseBody\n      }, byClassInstance);\n    });\n\n  });\n\n  describe('#registerFactory()', function () {\n    it('should register a factory', async function () {\n      // given\n      let factoryFn = sinon.stub();\n\n      // when\n      await appManager.registerFactory(UNIT_NAME, factoryFn);\n\n      assert.isTrue((<SinonStub>dependencyInjector.factory).calledWith(UNIT_NAME, factoryFn));\n    });\n  });\n\n  describe('#registerService()', async function () {\n    it('should register a service', async function () {\n      // given\n      let service = sinon.stub();\n\n      // when\n      await appManager.registerService(service, UNIT_NAME);\n\n      assert.isTrue((<SinonStub>dependencyInjector.service).calledWith(service, UNIT_NAME));\n    });\n  });\n\n  describe('#registerValue()', async function () {\n    it('should register a value', async function () {\n      // given\n      let value = sinon.stub();\n\n      // when\n      await appManager.registerValue(UNIT_NAME, value);\n\n      assert.isTrue((<SinonStub>dependencyInjector.value).calledWith(UNIT_NAME, value));\n    });\n  });\n\n  function classesInfo(): ClassInfo[] {\n    return [\n      {name: 'TestClassMain', classz: TestClassMain},\n      {name: 'ByClass', classz: ByClass},\n      {name: 'DependencyWithNameFromString', classz: DependencyWithNameFromString},\n      {name: 'DependencyClassNotService', classz: DependencyClassNotService}\n    ];\n  }\n\n  function dependencyInjectorHasMainClassAsService() {\n    (<SinonStub>dependencyInjector.findOne).withArgs(TestClassMain).returns(Optional.of({}));\n  }\n\n  function assertApiIsRegistered(endpointInfo: EndpointInfo, instance: any) {\n    assert.isTrue((<SinonStub>webManager.registerApi).calledWith(endpointInfo, instance));\n  }\n\n  function assertAllDependenciesWhereChecked() {\n    assert.isTrue((<SinonStub>dependencyInjector.assertAllResolved).calledWith());\n  }\n\n  function dependencyInjectorIsEmpty() {\n    (<SinonStub>dependencyInjector.findAll).returns([]);\n  }\n\n  function dependencyInjectorFindsController() {\n    (<SinonStub>dependencyInjector.findAll).returns([{name: 'byClass', value: byClassInstance, classz: ByClass}]);\n  }\n\n  function scannerReturnsTestClasses() {\n    (<SinonStub>moduleScannerService.scan).withArgs(['i-path/'], ['e-path/']).returns(classesInfo());\n  }\n\n  function assertServiceIsNotRegistered(classz: Function) {\n    let serviceRegistered = (<SinonStub>dependencyInjector.service).calledWith(classz);\n    assert.isFalse(serviceRegistered);\n  }\n\n  function assertServiceIsRegistered(classz: Function, name?: string) {\n    let serviceRegistered = (<SinonStub>dependencyInjector.service).calledWith(classz, name);\n    assert.isTrue(serviceRegistered);\n  }\n\n  function assertFactoryIsRegistered(target: any, factory: Function) {\n    let serviceRegistered = (<SinonStub>dependencyInjector.factory).calledWith(target, factory);\n    assert.equal(serviceRegistered, serviceRegistered);\n  }\n\n  @AutoScan(['i-path/'], ['e-path/'])\n  class TestClassMain {\n    @Factory('byFactory')\n    public create(): any {\n      return 10;\n    }\n  }\n\n  @Service\n  class ByClass {\n    @ResponseBody\n    @RequestMapping('/testApi-1', RequestType.GET)\n    public testApiMethodWithResponseBody(request, response) {\n      return 'test response';\n    }\n\n    @RequestMapping('/testApi-2', RequestType.POST)\n    public testApiMethodWithoutResponseBody(request, response) {\n      return 'test response';\n    }\n  }\n\n  @Service('byString')\n  class DependencyWithNameFromString {\n  }\n\n  class DependencyClassNotService {\n  }\n\n});"]}