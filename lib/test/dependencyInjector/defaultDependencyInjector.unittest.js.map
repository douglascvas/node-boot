{"version":3,"sources":["../src/test/dependencyInjector/defaultDependencyInjector.unittest.ts"],"names":[],"mappings":"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","file":"defaultDependencyInjector.unittest.js","sourcesContent":["'use strict';\n\nimport * as sinon from \"sinon\";\nimport * as chai from \"chai\";\nimport SinonSpy = Sinon.SinonSpy;\nimport SinonStub = Sinon.SinonStub;\nimport {LoggerFactory, Logger} from \"../../main/loggerFactory\";\nimport {DefaultDependencyInjector} from \"../../main/dependencyInjector/defaultDependencyInjector\";\nimport {Optional} from \"../../main/optional\";\n\nconst assert = chai.assert;\n\ndescribe('DefaultDependencyInjector', function () {\n\n  let loggerFactory: LoggerFactory;\n  let dependencyInjector: DefaultDependencyInjector;\n  const FOO_ID = 'fooId';\n  const BAR_ID = 'barId';\n  const ROCKET_ID = 'rocketId';\n\n  beforeEach(() => {\n    loggerFactory = <any>sinon.createStubInstance(LoggerFactory);\n    (<SinonStub>loggerFactory.getLogger).returns(sinon.createStubInstance(Logger));\n    dependencyInjector = new DefaultDependencyInjector(loggerFactory);\n  });\n\n  describe('#value', function () {\n    it('should register a value', async function () {\n      // given\n      let value = 123;\n      await dependencyInjector.value(\"test\", value);\n\n      // when\n      let result: Optional<any> = dependencyInjector.findOne(\"test\");\n\n      // then\n      assert.equal(result.get(), value);\n    });\n  });\n\n  describe('#service', function () {\n    it('should register a service extracting name from class', async function () {\n      // given\n      await dependencyInjector.service(Foo);\n\n      // when\n      let foo: Optional<any> = dependencyInjector.findOne('foo');\n\n      // then\n      assert.isTrue(foo.isPresent());\n      assert.equal(foo.get().id, FOO_ID);\n    });\n\n    it('should register a service with given name', async function () {\n      // given\n      await dependencyInjector.service(Foo, 'customFooName');\n\n      // when\n      let foo: Optional<any> = dependencyInjector.findOne('customFooName');\n\n      // then\n      assert.isTrue(foo.isPresent());\n      assert.equal(foo.get().id, FOO_ID);\n\n      foo = dependencyInjector.findOne('foo');\n\n      assert.isFalse(foo.isPresent());\n    });\n\n    it('should register a service with a dependency', async function () {\n      // given\n      await dependencyInjector.service(Foo);\n      await dependencyInjector.service(Bar);\n\n      // when\n      let bar: Optional<any> = dependencyInjector.findOne('bar');\n\n      // then\n      assert.isTrue(bar.isPresent());\n      assert.equal(bar.get().id, BAR_ID);\n      assert.isTrue(!!bar.get().foo);\n      assert.equal(bar.get().foo.id, FOO_ID);\n    });\n\n    it('should register a service with a dependency registered after it', async function () {\n      // given\n      await dependencyInjector.service(Bar);\n      await dependencyInjector.service(Foo);\n\n      // when\n      let bar: Optional<any> = dependencyInjector.findOne('bar');\n\n      // then\n      assert.isTrue(bar.isPresent());\n      assert.equal(bar.get().id, BAR_ID);\n      assert.isTrue(!!bar.get().foo);\n      assert.equal(bar.get().foo.id, FOO_ID);\n    });\n  });\n\n  describe('#factory', function () {\n    it('should register a factory by extracting the name from the class', async function () {\n      // given\n      let factoryFn = function (rocket: Rocket) {\n        let result: Foo = new Foo();\n        result.rocket = rocket;\n        result.rocket.id = \"space rocket\";\n        return result;\n      };\n      await dependencyInjector.service(Rocket);\n      await dependencyInjector.factory(Foo, factoryFn);\n\n      // when\n      let foo: Optional<any> = dependencyInjector.findOne('foo');\n\n      // then\n      assert.isTrue(foo.isPresent());\n      assert.equal(foo.get().id, FOO_ID);\n      assert.isTrue(!!foo.get().rocket);\n      assert.equal(foo.get().rocket.id, \"space rocket\");\n    });\n\n    it('should register a factory using the given name', async function () {\n      // given\n      let factoryFn = function (rocket: Rocket) {\n        let result: Foo = new Foo();\n        result.rocket = rocket;\n        result.rocket.id = \"space rocket\";\n        return result;\n      };\n      await dependencyInjector.service(Rocket);\n      await dependencyInjector.factory('customFoo', factoryFn);\n\n      // when\n      let foo: Optional<any> = dependencyInjector.findOne('customFoo');\n\n      // then\n      assert.isTrue(foo.isPresent());\n      assert.equal(foo.get().id, FOO_ID);\n      assert.isTrue(!!foo.get().rocket);\n      assert.equal(foo.get().rocket.id, \"space rocket\");\n    });\n\n    it('should resolve a factory whose dependency is registered after it', async function () {\n      // given\n      let factoryFn = function (rocket: Rocket) {\n        let result: Foo = new Foo();\n        result.rocket = rocket;\n        result.rocket.id = \"space rocket\";\n        return result;\n      };\n      await dependencyInjector.factory(Foo, factoryFn);\n      await dependencyInjector.service(Rocket);\n\n      // when\n      let foo: Optional<any> = dependencyInjector.findOne('foo');\n\n      // then\n      assert.isTrue(foo.isPresent());\n      assert.equal(foo.get().id, FOO_ID);\n      assert.isTrue(!!foo.get().rocket);\n      assert.equal(foo.get().rocket.id, \"space rocket\");\n    });\n\n    it('should register a factory setting the right context registered by name', async function () {\n      // given\n      await dependencyInjector.factory('planet', Rocket.prototype.factoryFn, 'rocket');\n      await dependencyInjector.service(Rocket);\n      await dependencyInjector.service(Foo);\n\n      // when\n      let planet: Optional<any> = dependencyInjector.findOne('planet');\n\n      // then\n      assert.isTrue(planet.isPresent());\n      assert.equal(planet.get().fooId, FOO_ID);\n      assert.equal(planet.get().rocketId, ROCKET_ID);\n    });\n\n    it('should register a factory setting the right context registered by class', async function () {\n      // given\n      await dependencyInjector.factory('planet', Rocket.prototype.factoryFn, Rocket);\n      await dependencyInjector.service(Rocket);\n      await dependencyInjector.service(Foo);\n\n      // when\n      let planet: Optional<any> = dependencyInjector.findOne('planet');\n\n      // then\n      assert.isTrue(planet.isPresent());\n      assert.equal(planet.get().fooId, FOO_ID);\n      assert.equal(planet.get().rocketId, ROCKET_ID);\n    });\n  });\n\n  class Rocket {\n    id: any = ROCKET_ID;\n\n    public factoryFn(foo: Foo) {\n      return {fooId: foo.id, rocketId: this.id};\n    };\n  }\n\n  class Foo {\n    public id: any = FOO_ID;\n    public rocket: Rocket = null;\n  }\n\n  class Bar {\n    id: string = BAR_ID;\n\n    constructor(public foo: Foo) {\n    }\n  }\n\n  process.on('unhandledRejection', (reason) => {\n    console.log('Reason: ', reason);\n  });\n\n});"]}