{"version":3,"sources":["../src/test/routeManager/expressWebManager.unittest.ts"],"names":[],"mappings":"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","file":"expressWebManager.unittest.js","sourcesContent":["'use strict';\n\nimport * as sinon from \"sinon\";\nimport * as chai from \"chai\";\nimport {LoggerFactory, Logger} from \"../../main/loggerFactory\";\nimport {EndpointInfo, RequestType} from \"../../main/decorator/mvc\";\nimport {ExpressWebManager} from \"../../main/webManager/expressWebManager\";\nimport SinonSpy = Sinon.SinonSpy;\nimport SinonStub = Sinon.SinonStub;\n\nconst assert = chai.assert;\n\ndescribe('ExpressWebManager', function () {\n\n  let expressApp: any;\n  let expressRouter: any;\n  let loggerFactory: LoggerFactory;\n  let expressWebManager: ExpressWebManager;\n\n  beforeEach(() => {\n    expressRouter = {get: sinon.stub(), post: sinon.stub()};\n    expressApp = {\n      Router: function () {\n        return expressRouter;\n      }\n    };\n    loggerFactory = <any>sinon.createStubInstance(LoggerFactory);\n    (<SinonStub>loggerFactory.getLogger).returns(sinon.createStubInstance(Logger));\n    expressWebManager = new ExpressWebManager(expressApp, loggerFactory);\n  });\n\n  describe('#registerApi()', function () {\n    it('should register a GET api', async function () {\n      // given\n      let API_PATH = \"/test\";\n      let obj = new TestClass();\n      let callback = sinon.spy();\n      let endpointInfo: EndpointInfo = {path: API_PATH, type: RequestType.GET, callback: callback};\n\n      // when\n      await expressWebManager.registerApi(endpointInfo, obj);\n\n      // then\n      assert.isTrue(expressRouter.get.calledWith(API_PATH, sinon.match.any));\n      const callbackUsed: SinonSpy = expressRouter.get.args[0][1];\n      assert.equal(callback.callCount, 0);\n      callbackUsed();\n      assert.equal(callback.callCount, 1);\n    });\n\n    it('should register a POST api', async function () {\n      // given\n      let API_PATH = \"/test\";\n      let obj = new TestClass();\n      let callback = sinon.spy();\n      let endpointInfo: EndpointInfo = {path: API_PATH, type: RequestType.POST, callback: callback};\n\n      // when\n      await expressWebManager.registerApi(endpointInfo, obj);\n\n      // then\n      assert.isTrue(expressRouter.post.calledWith(API_PATH, sinon.match.any));\n      const callbackUsed: SinonSpy = expressRouter.post.args[0][1];\n      assert.equal(callback.callCount, 0);\n      callbackUsed();\n      assert.equal(callback.callCount, 1);\n    });\n  });\n\n  class TestClass {\n  }\n\n});"]}